@page "/users"
@inject IJSRuntime js;
@inject Services.IAppUserService servicesUser
@using ViewModels.AppRole
@using ViewModels.AppUser
@rendermode InteractiveServer

<h3>Controle de Usuarios</h3>

@if (users == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>                
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Email</td>
                    <td><input type="button" class="btn btn-primary" @onclick="(() => PreparaEdicao(user))" data-toggle="modal" data-target="#roleModal" value="Edita" /></td>
                    <td><input type="button" class="btn btn-danger" @onclick="(() => PreparaExclusao(user))" data-toggle="modal" data-target="#confirmaExclusaoModal" value="Deleta" /></td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" data-toggle="modal" data-target="#roleModal" 
    class="btn btn-primary" value="Novo usuario" @onclick="(() => InitializeTarefaObject())" />
</div>


<ConfirmaDialog OnClick="@Delete" />

<UserModal userObj=usersObject AlteracaoDados="@AlteracaoDados">
    <Cabecalho>@cabecalho</Cabecalho>
</UserModal>

@code {
    List<AppUserVM> users;
    AppUserVM usersObject = new AppUserVM();
    string cabecalho = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var list = servicesUser.GetAllAppUsersWithRoles().Result;
        users = (list.Data.AsQueryable<AppUserVM>()).ToList();//new List<AppRoleVM>();
    }
    
    private void PreparaEdicao(AppUserVM user)
    {
        cabecalho = "Edita Tarefa";
        usersObject = user;
    }

    private void PreparaExclusao(AppUserVM user)
    {
        usersObject = user;
    }

    private void InitializeTarefaObject()
    {
        usersObject = new AppUserVM();
        //rolesObject.ConclusaoEm = DateTime.Now;
        cabecalho = "Nova Tarefa";
    }
    private async void AlteracaoDados()
    {
        var list = servicesUser.GetAllAppUsersWithRoles().Result;
        users = (list.Data.AsQueryable<AppUserVM>()).ToList();
        StateHasChanged();
    }

    private async Task Delete()
    {
        //await servicesUser.UpdateAppUserRole(usersObject);
        await js.InvokeAsync<object>("CloseModal", "confirmaExclusaoModal");        
        var list = servicesUser.GetAllAppUsersWithRoles().Result;
        users = (list.Data.AsQueryable<AppUserVM>()).ToList();
        usersObject = new AppUserVM();
        //StateHasChanged();
    }
}