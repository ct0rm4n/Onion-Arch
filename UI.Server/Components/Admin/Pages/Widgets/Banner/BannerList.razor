@page "/Admin/Catalog/Banner"

@using Application.Dto.ViewModels.Banner
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Services.IBannerService service
@inject IJSRuntime js;

@rendermode InteractiveServer
<PageTitle>Banner list</PageTitle>
<h3>Banner list</h3>

@if (items == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-md-2">
                                <div class="search-box">
                                    <input type="search" autofocus @bind="descFilter" @bind:event="oninput" placeholder="Search..." />
                                </div>
                            </div>
                            <div class="col-md-8">

                            </div>
                            <div class="col-md-2">
                                <a type="button" data-toggle="modal" data-target="#bannerModal"
                                       class="btn btn-primary" @onclick="(() => InitializeItemObject())">
                                       <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true" b-4knz10sgzz=""></span> Novo
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <QuickGrid Items="FilteredItems" Pagination="pagination">
                            <PropertyColumn Property="@(f => f.Name)" Title="Desc" Sortable="true" >
                            </PropertyColumn>
                            <PropertyColumn Property="@(f => f.Title)" Title="Title" Sortable="false" />
                            <PropertyColumn Property="f => f.Start" Format="dddd, dd MMMM yyyy" Sortable="true" />
                            <PropertyColumn Property="f => f.End" Format="dddd, dd MMMM yyyy" Sortable="true" />
                            <TemplateColumn Title="Actions">
                                <Input type="button" class="btn btn-primary" @onclick="(() => PreparaEdicao(context))" data-toggle="modal" data-target="#bannerModal" value="Edita" />
                                <input type="button" class="btn btn-danger" @onclick="(() => PreparaExclusao(context))" data-toggle="modal" data-target="#confirmaExclusaoModal" value="Deleta" />
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                    <Paginator State="@pagination" />
                </div>
            </div>
        </div>
    </div>
}

<ConfirmaDialog OnClick="@Delete" />
<BannerDetails itemObject=bannerObject AlteracaoDados="@AlteracaoDados">
    <Cabecalho>@cabecalho</Cabecalho>
</BannerDetails>

@code {
    List<BannerVM> items;

    BannerVM bannerObject = new BannerVM();
    string cabecalho = string.Empty;
    string descFilter = string.Empty;
    IQueryable<BannerVM> FilteredItems
    {
        get
        {
            var result = items.AsQueryable();
            if (!string.IsNullOrEmpty(descFilter))
            {
                result = result.Where(f =>
                    f.Name.Contains(descFilter, StringComparison.CurrentCultureIgnoreCase) 
                    || f.Title.Contains(descFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }

    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    protected override async Task OnInitializedAsync()
    {
        items = await service.GetList();
        //await js.InvokeAsync<object>("TestDataTablesAdd", "#table");
    }
    
    private void PreparaEdicao(BannerVM item)
    {
        cabecalho = "Edita Banner";
        bannerObject = item;
    }

    private void PreparaExclusao(BannerVM task)
    {
        bannerObject = task;
    }

    private void InitializeItemObject()
    {
        bannerObject = new BannerVM();
        bannerObject.Start = DateTime.Now;
        cabecalho = "Nova Banner";
    }
    private async void AlteracaoDados()
    {
        Thread.Sleep(2000);
        items = await service.GetList();
        StateHasChanged();
    }

    private async Task Delete()
    {
        await js.InvokeAsync<object>("CloseModal", "confirmaExclusaoModal");
        items = await service.GetList();
        bannerObject = new BannerVM();
    }
    
}

