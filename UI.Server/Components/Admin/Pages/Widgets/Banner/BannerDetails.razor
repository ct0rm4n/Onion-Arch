@inject IJSRuntime js;
@using Application.ViewModels.ToDo
@using Blazored.TextEditor
@using FluentValidation
@using Application.Dto.ViewModels.Banner
@inject Services.IBannerService service
@inject IValidator<BannerVM> Validator

@rendermode InteractiveServer

<div class="modal" tabindex="-1" role="dialog" id="bannerModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@itemObject" formname="bannerVM"
                           OnValidSubmit="@HandleSubmit" enctype="multipart/form-data">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @((MarkupString)errorMessage)
                        </div>
                    }
                    <div class="form-group mt-2 mb-2">
                        <label for="Nome">Title</label>
                         <input type="hidden" id="Id" @bind-value="@itemObject.Id" />
                         <InputText id="Name" class="form-control" @bind-Value="@itemObject.Title" />
                        <ValidationMessage For="@(() => itemObject.Title)" />
                    </div>
                    <div class="form-group mt-2 mb-2">
                        <label for="Nome">Url</label>
                        <InputText id="Url" class="form-control" @bind-Value="@itemObject.Url" />
                        <ValidationMessage For="@(() => itemObject.Url)" />
                    </div>
                    <div class="form-group mt-2 mb-2">
                         <label for="Nome">Selecione até 5 arquivo(s):</label>
                        <InputFile @bind-Value="@itemObject.Binary" class="form-control" OnChange="@SelectFiles" multiple />
                         <ValidationMessage For="@(() => itemObject.Binary)" />
                     </div>
                    <div class="form-group mb-3 mt-3">
                        <label for="ConclusaoEm">Inicio em : </label>
                        <input id="ConclusaoEm" type="date" name="math" @bind-value="@itemObject.Start" />
                        <ValidationMessage For="@(() => itemObject.Start)" />
                    </div>
                    <div class="form-group mb-3 mt-3">
                        <label for="ConclusaoEm">Possui fim ? </label>
                        <input id="ConclusaoEm" type="date" name="math" @bind-value="@itemObject.Start" />
                        <ValidationMessage For="@(() => itemObject.Start)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Envia</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                </EditForm>
                
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    List<IBrowserFile> arquivos = new();
    int tamanhoMaximoArquivo = 1 * 1024 * 1024;
    BannerVM arquivoUpload = new();
    List<BannerVM> uploads = new();
    [CascadingParameter] private EditContext _editContext { get; set; } = default!;

    [Parameter]
    public BannerVM itemObject { get; set; } = new BannerVM();
    [Parameter]
    public RenderFragment Cabecalho { get; set; }

    [Parameter]
    public Action AlteracaoDados { get; set; }


    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "bannerModal");
    }

    public async Task HandleInValidSubmit(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();        
        var validationResult = await Validator.ValidateAsync(itemObject);
        if (validationResult.IsValid)
        {
            //await HandleSubmit();
        }
        else
        {
            return;
        }        
    }
    private async Task SelectFiles(InputFileChangeEventArgs e)
    {
        arquivos = e.GetMultipleFiles(tamanhoMaximoArquivo).ToList();
        var file = arquivos.FirstOrDefault();
        try
        {
            if (file is not null)
            {
                var buffer = new byte[file.Size];
                using (var stream = file.OpenReadStream())
                {
                    await stream.ReadAsync(buffer, 0, buffer.Length);
                }
                itemObject.Binary = Convert.ToBase64String(buffer);
            }
        }catch(Exception ex)
        {
            return;
        }
    }

    private async Task HandleSubmit()
    {
        var erro = false;
        var extensoesPermitidas = new string[] { ".png", ".jpg", ".jpeg", ".gif", ".bmp" };
        int contador = 0;
        var validate = await Validator.ValidateAsync(itemObject);
        if (itemObject.Id > 0 && arquivos.Count() > 0)
        {
            foreach (var arquivo in arquivos)
            {
                try
                {
                    (int statusCode, string statusMessage) =
                     await service.UploadAsync(arquivo, tamanhoMaximoArquivo, extensoesPermitidas);
                    if (statusCode == 1)
                    {
                        errorMessage = ($" {arquivo.Name} ");
                        itemObject.Name = statusMessage;
                        await service.CreateOrUpdate(itemObject);
                        AlteracaoDados?.Invoke();
                        await CloseItemModal();
                        contador++;
                    }
                    else
                    {
                        erro = true;
                        errorMessage = (statusMessage);
                    }
                }
                catch (Exception ex)
                {
                    erro = true;
                    errorMessage = ($"Arquivo : {arquivo.Name} Erro : {ex.Message}");
                }
            }
        }
        else if (validate.IsValid)
        {
            await service.CreateOrUpdate(itemObject);
        }
        else
        {
            validate.Errors.ForEach(x => errorMessage = errorMessage + x.ErrorMessage + "</br>");
            erro = true;
        }
        if (!erro)
        {
            await CloseItemModal();
            AlteracaoDados?.Invoke();
        }
    }
}