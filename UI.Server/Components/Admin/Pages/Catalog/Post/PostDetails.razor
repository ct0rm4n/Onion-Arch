@inject IJSRuntime js;
@using Application.ViewModels.Post
@using Blazored.TextEditor
@using Domain.Entities.Concrates
@using FluentValidation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject Services.IPostService service
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IValidator<PostVM> Validator

@attribute [Authorize]
<div class="modal" tabindex="-1" role="dialog" id="postModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@postObject" Enhance EditContext="_editContext" formname="PostVM"
                           OnValidSubmit="@HandleInValidSubmit">
                     <DataAnnotationsValidator />
                     @if(!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @((MarkupString)errorMessage)
                        </div>
                    }
                    <ValidationSummary />
                     <div class="form-group mt-2 mb-2">
                         <label for="Nome">Name</label>
                         <input type="hidden" id="Id" @bind-value="@postObject.Id" />
                         <InputText id="Name" class="form-control" @bind-Value="@postObject.Name" />
                         <ValidationMessage For="@(() => postObject.Name)" />
                     </div>
                    <BlazoredTextEditor @ref="@richEditor">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent >
                            
                        </EditorContent>
                    </BlazoredTextEditor>                   
                    
                    <ValidationMessage For="@(() => postObject.Html)" />

                    <div class="form-group mb-6 mt-6">
                        <label for="Start">Inicio : </label>
                        <input id="Start" type="date" name="math" @bind-value="@postObject.Start" />
                        <ValidationMessage For="@(() => postObject.Start)" />
                    
                        <label for="End">Fim em : </label>
                        <input id="End" type="date" name="math" @bind-value="@postObject.End" />
                        <ValidationMessage For="@(() => postObject.End)" />
                    </div>
                    <div class="form-group mt-2 mb-2">
                        <label for="Tags">Tags</label>
                        <InputText id="Tags" class="form-control" @bind-Value="@postObject.Tags" />
                        <ValidationMessage For="@(() => postObject.Tags)" />
                    </div>

                    <div class="form-group mt-2 mb-2">
                        <label for="Publish">Publish</label>
                        <input type="checkbox" id="Publish" @bind="@postObject.Publish" />
                        <ValidationMessage For="@(() => postObject.Publish)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Envia</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    [CascadingParameter] private EditContext _editContext { get; set; } = default!;
    [Parameter]
    public PostVM postObject { get; set; } = new PostVM();
    BlazoredTextEditor richEditor = default!;
    [Parameter]
    public RenderFragment Cabecalho { get; set; }
    private readonly Microsoft.AspNetCore.Identity.UserManager<AppUser> _userManager;
    [Parameter]
    public Action AlteracaoDados { get; set; }

    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "postModal");
    }
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     loaddata();
    //     base.OnAfterRender(firstRender);
    // }
    // void loaddata()
    // {
    //     //var html = blazoredtexteditor.loadhtml(somedatatoload)
        
    // }
    protected async override Task OnParametersSetAsync()
    {
        /// Load the content here based on the parameters
        try
        {
            if (postObject.Id != null && postObject.Id > 0 && !string.IsNullOrEmpty(postObject.Html))
            {
                await richEditor.LoadHTMLContent(postObject.Html);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Quill Exception: {ex}");
        }
    }
    public async Task HandleInValidSubmit(EditContext editContext)
    {        
        await UpdateDescription();
        var validationResult = await Validator.ValidateAsync(postObject);                
        if (validationResult.IsValid)
        {
            errorMessage = null;
            await HandleSubmit();
        }
        else
        {
            var model = editContext.GetValidationMessages();
            errorMessage = "<ul>";
            foreach (var error in validationResult.Errors)
            {
                errorMessage = string.Format("{0}</br>{1}", errorMessage, $"<li>{error}</li>");
            }
            string.Format("{0}{1}", errorMessage, $"</ul>");
            return;
        }
    }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<AppUser> userManager { get; set; }
    public async Task HandleSubmit()
    {        
        var user = (await authenticationStateTask).User;
        //if(postObject.AppUserId == null || postObject.AppUserId == 0)
            //postObject.AppUserId = (await userManager.GetUserAsync(user)).Id;
        await service.CreateOrUpdate(postObject);
        await CloseItemModal();
        AlteracaoDados?.Invoke();
    }
    public async Task UpdateDescription()
    {
        postObject.Html = await richEditor.GetHTML();
        StateHasChanged();
    }
}