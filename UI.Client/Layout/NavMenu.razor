@implements IDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime js;
@rendermode InteractiveServer

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">OpenBlazor</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable @NavMenuCssClass">
    <ul class="flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </li>

       <li class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </li>        

        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="()=> catalogSubMenu =! catalogSubMenu">
                <span class="bi bi-caret-right-fill fs-3" aria-hidden="true" style="margin-top: -30px; display: @(catalogSubMenu == false ? "block" : "none")"></span>
                <span class="bi bi-caret-down-fill fs-3" aria-hidden="true" style="margin-top: -30px; display: @(catalogSubMenu == false ? "none" : "block")"></span>
                Catalog
            </NavLink>
            @if (catalogSubMenu)
            {
                <ul class="nav flex-column">
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Catalog/Categories">
                            
                            Categories
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Catalog/Post">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Posts
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Catalog/Banner">
                            Banner
                        </NavLink>
                    </li>
                </ul>
            }
        </li>
        
        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="()=> userSubMenu =! userSubMenu">
                <span class="bi bi-caret-right-fill fs-3" aria-hidden="true" style="margin-top: -30px; display: @(userSubMenu == false ? "block" : "none")"></span>
                <span class="bi bi-caret-down-fill fs-3" aria-hidden="true" style="margin-top: -30px; display: @(userSubMenu == false ? "none" : "block")"></span> 
                UserManager
            </NavLink>
            @if(userSubMenu)
            {
                <ul class="nav flex-column">
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Identity/Users">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> User
                        </NavLink>
                    </li>

                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Identity/Roles">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Roles
                        </NavLink>
                    </li>

                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="Admin/Identity/ItemList">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> ToDo
                        </NavLink>
                    </li>
                </ul>
            }
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
            </NavLink>
        </li>
 
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                         <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView> 
    </ul>
</div>

@code {

    private bool collapseNavMenu = true;
    private bool catalogSubMenu;
    private bool userSubMenu;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string? currentUrl;
    protected override void OnInitialized()
    {        
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        RouteChangeMenu(currentUrl);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public void RouteChangeMenu(string path)
    {
        switch (path)
        {
            case string a when a.Contains("Catalog"):
                catalogSubMenu = true;
                break;
            case string b when b.Contains("Identity"):
                userSubMenu = true;
                break;
        }
    }
}

