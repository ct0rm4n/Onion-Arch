@inject IJSRuntime js;
@using Application.ViewModels.ToDo
@inject Services.IToDoService service

<div class="modal" tabindex="-1" role="dialog" id="itemModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@itemObject" Enhance EditContext="_editContext" formname="ToDoVM" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group mt-2 mb-2">
                        <label for="Nome">Nome</label>
                         <input type="hidden" id="Id" @bind-value="@itemObject.Id" />
                         <InputText id="Nome" class="form-control" @bind-Value="@itemObject.Nome" />
                        <ValidationMessage For="@(() => itemObject.Nome)" />
                    </div>
                    <div class="form-group mb-2">
                        <label for="status">Status</label>
                         <InputSelect id="Progress" class="form-control" @bind-Value="itemObject.Progress">
                            <option value="">Selecione</option>
                            @foreach (var status in ItemStatus)
                            {
                                    <option value="@status">
                                        @status
                                    </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => itemObject.Progress)" />
                    </div>
                    <div class="form-group mb-3 mt-3">
                        <label for="ConclusaoEm">Conclusão em : </label>
                        <input id="ConclusaoEm" type="date" name="math" @bind-value="@itemObject.ConclusaoEm" />
                        <ValidationMessage For="@(() => itemObject.ConclusaoEm)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Envia</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                </EditForm>
                
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    [CascadingParameter] private EditContext _editContext { get; set; } = default!;
    [Parameter]//[SupplyParameterFromForm(Name = "itemObject", FormName = "itemObject")]
    public ToDoVM itemObject { get; set; } = new ToDoVM();

    [Parameter]
    public RenderFragment Cabecalho { get; set; }

    [Parameter]
    public Action AlteracaoDados { get; set; }

    List<string> ItemStatus = new List<string>() { "Nova", "Em andamento", "Concluída" };

    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "itemModal");
    }

    public async Task HandleValidSubmit()
    {    
        await CloseItemModal();
        AlteracaoDados?.Invoke();
    }
    public async Task HandleSubmit()
    {

        await service.CreateOrUpdate(itemObject);
        await CloseItemModal();
        AlteracaoDados?.Invoke();
    }
}